
task01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000142  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032f  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c3  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000197  00000000  00000000  00001983  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8e:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:

void setup(){
		
	
	
	EIMSK |=(1<<INT0)|(1<<INT1);
  96:	8d b3       	in	r24, 0x1d	; 29
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	8d bb       	out	0x1d, r24	; 29
	
	EICRA |=(1<<ISC01)|(1<<ISC11);//Isc11 -Int1 pin faling edge trigger
  9c:	e9 e6       	ldi	r30, 0x69	; 105
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8a 60       	ori	r24, 0x0A	; 10
  a4:	80 83       	st	Z, r24
	
	sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <__vector_1>:
	
	
	
}
ISR(INT0_vect){
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1



}	
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <main>:

int main(void)
{	
	DDRC = 0xff;
  be:	9f ef       	ldi	r25, 0xFF	; 255
  c0:	97 b9       	out	0x07, r25	; 7
	DDRD &=~(1<<pushbutton1)&(1<<pushbutton2);
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	88 70       	andi	r24, 0x08	; 8
  c6:	8a b9       	out	0x0a, r24	; 10
	
	
	
	DDRD |=(1<<PD4);
  c8:	54 9a       	sbi	0x0a, 4	; 10
	
	DDRB = 0xff;
  ca:	94 b9       	out	0x04, r25	; 4
	setup();
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <setup>
		else if (b<100 )
		{
			int givenNumber =b*100;
			int decimalPart = givenNumber % 100;
			
			PORTB = 0b00000001;
  d0:	51 e0       	ldi	r21, 0x01	; 1
			PORTC = num[givenNumber/1000 %10];
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	f1 e0       	ldi	r31, 0x01	; 1
			_delay_ms(200);
			
			PORTB = 0b00000010;
  d6:	42 e0       	ldi	r20, 0x02	; 2
			PORTC = num[givenNumber/100 %10];
			_delay_ms(66.67);
			PORTD =0b00010000;
  d8:	30 e1       	ldi	r19, 0x10	; 16
			_delay_ms(66.67);
			PORTD = 0b00000000;
			_delay_ms(66.67);
			
			PORTB = 0b00000100;
  da:	24 e0       	ldi	r18, 0x04	; 4
			PORTC = num[decimalPart/10 %10];
			_delay_ms(200);
			PORTB = 0b00001000;
  dc:	98 e0       	ldi	r25, 0x08	; 8
		else if (b<100 )
		{
			int givenNumber =b*100;
			int decimalPart = givenNumber % 100;
			
			PORTB = 0b00000001;
  de:	55 b9       	out	0x05, r21	; 5
			PORTC = num[givenNumber/1000 %10];
  e0:	81 81       	ldd	r24, Z+1	; 0x01
  e2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	af e4       	ldi	r26, 0x4F	; 79
  e6:	b3 ec       	ldi	r27, 0xC3	; 195
  e8:	11 97       	sbiw	r26, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x2a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x30>
  ee:	00 00       	nop
			_delay_ms(200);
			
			PORTB = 0b00000010;
  f0:	45 b9       	out	0x05, r20	; 5
			PORTC = num[givenNumber/100 %10];
  f2:	80 85       	ldd	r24, Z+8	; 0x08
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	ab e1       	ldi	r26, 0x1B	; 27
  f8:	b1 e4       	ldi	r27, 0x41	; 65
  fa:	11 97       	sbiw	r26, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x3c>
  fe:	00 00       	nop
			_delay_ms(66.67);
			PORTD =0b00010000;
 100:	3b b9       	out	0x0b, r19	; 11
 102:	ab e1       	ldi	r26, 0x1B	; 27
 104:	b1 e4       	ldi	r27, 0x41	; 65
 106:	11 97       	sbiw	r26, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x48>
 10a:	00 00       	nop
			_delay_ms(66.67);
			PORTD = 0b00000000;
 10c:	1b b8       	out	0x0b, r1	; 11
 10e:	ab e1       	ldi	r26, 0x1B	; 27
 110:	b1 e4       	ldi	r27, 0x41	; 65
 112:	11 97       	sbiw	r26, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x54>
 116:	00 00       	nop
			_delay_ms(66.67);
			
			PORTB = 0b00000100;
 118:	25 b9       	out	0x05, r18	; 5
			PORTC = num[decimalPart/10 %10];
 11a:	85 81       	ldd	r24, Z+5	; 0x05
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	af e4       	ldi	r26, 0x4F	; 79
 120:	b3 ec       	ldi	r27, 0xC3	; 195
 122:	11 97       	sbiw	r26, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x64>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x6a>
 128:	00 00       	nop
			_delay_ms(200);
			PORTB = 0b00001000;
 12a:	95 b9       	out	0x05, r25	; 5
			PORTC = num[decimalPart/1 %10];
 12c:	86 81       	ldd	r24, Z+6	; 0x06
 12e:	88 b9       	out	0x08, r24	; 8
 130:	af e4       	ldi	r26, 0x4F	; 79
 132:	b3 ec       	ldi	r27, 0xC3	; 195
 134:	11 97       	sbiw	r26, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x76>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x7c>
 13a:	00 00       	nop
 13c:	d0 cf       	rjmp	.-96     	; 0xde <main+0x20>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
